{
	"info": {
		"_postman_id": "a8f4c2d6-9e3b-4c1a-8f7e-2d4b6c8a9f1e",
		"name": "OpenWeather API - QA Tests Tunisia",
		"description": "Collection complète de tests automatisés pour l'API OpenWeather avec focus sur les villes tunisiennes. Validation des endpoints principaux, gestion d'erreurs et assertions JavaScript.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Current Weather - Tunis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"Response contains required weather data\", function () {",
							"    pm.expect(responseJson).to.have.property('main');",
							"    pm.expect(responseJson.main).to.have.property('temp');",
							"    pm.expect(responseJson.main).to.have.property('humidity');",
							"    pm.expect(responseJson).to.have.property('weather');",
							"    pm.expect(responseJson).to.have.property('name');",
							"});",
							"",
							"pm.test(\"City name contains Tunis\", function () {",
							"    pm.expect(responseJson.name).to.include('Tunis');",
							"});",
							"",
							"pm.test(\"Country code is TN\", function () {",
							"    pm.expect(responseJson.sys).to.have.property('country');",
							"    pm.expect(responseJson.sys.country).to.equal('TN');",
							"});",
							"",
							"pm.test(\"Temperature is valid for Tunisia climate\", function () {",
							"    pm.expect(responseJson.main.temp).to.be.a('number');",
							"    pm.expect(responseJson.main.temp).to.be.within(-5, 50);",
							"});",
							"",
							"pm.test(\"Humidity is within valid range\", function () {",
							"    pm.expect(responseJson.main.humidity).to.be.a('number');",
							"    pm.expect(responseJson.main.humidity).to.be.within(0, 100);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/weather?q=Tunis,TN&appid={{api_key}}&units=metric",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "Tunis,TN"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						},
						{
							"key": "units",
							"value": "metric"
						}
					]
				}
			}
		},
		{
			"name": "Current Weather - Radès",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"Weather data structure is valid\", function () {",
							"    pm.expect(responseJson).to.have.property('main');",
							"    pm.expect(responseJson).to.have.property('weather');",
							"    pm.expect(responseJson).to.have.property('wind');",
							"    pm.expect(responseJson).to.have.property('sys');",
							"});",
							"",
							"pm.test(\"Location is in Tunisia\", function () {",
							"    pm.expect(responseJson.sys.country).to.equal('TN');",
							"});",
							"",
							"pm.test(\"Temperature data is present\", function () {",
							"    pm.expect(responseJson.main.temp).to.be.a('number');",
							"    pm.expect(responseJson.main.feels_like).to.be.a('number');",
							"    pm.expect(responseJson.main.temp_min).to.be.a('number');",
							"    pm.expect(responseJson.main.temp_max).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Weather description is provided\", function () {",
							"    pm.expect(responseJson.weather).to.be.an('array');",
							"    pm.expect(responseJson.weather[0]).to.have.property('main');",
							"    pm.expect(responseJson.weather[0]).to.have.property('description');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/weather?q=Radès,TN&appid={{api_key}}&units=metric",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "Radès,TN"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						},
						{
							"key": "units",
							"value": "metric"
						}
					]
				}
			}
		},
		{
			"name": "Weather by Coordinates - Tunis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"Coordinates match Tunis area\", function () {",
							"    pm.expect(responseJson).to.have.property('coord');",
							"    pm.expect(responseJson.coord.lat).to.be.closeTo(36.8065, 0.1);",
							"    pm.expect(responseJson.coord.lon).to.be.closeTo(10.1815, 0.1);",
							"});",
							"",
							"pm.test(\"Weather data is complete\", function () {",
							"    pm.expect(responseJson).to.have.property('main');",
							"    pm.expect(responseJson).to.have.property('weather');",
							"    pm.expect(responseJson).to.have.property('visibility');",
							"    pm.expect(responseJson).to.have.property('dt');",
							"});",
							"",
							"pm.test(\"Wind data is present\", function () {",
							"    pm.expect(responseJson).to.have.property('wind');",
							"    pm.expect(responseJson.wind).to.have.property('speed');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/weather?lat=36.8065&lon=10.1815&appid={{api_key}}&units=metric",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"weather"
					],
					"query": [
						{
							"key": "lat",
							"value": "36.8065"
						},
						{
							"key": "lon",
							"value": "10.1815"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						},
						{
							"key": "units",
							"value": "metric"
						}
					]
				}
			}
		},
		{
			"name": "5-Day Forecast - Tunis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"Forecast list is present\", function () {",
							"    pm.expect(responseJson).to.have.property('list');",
							"    pm.expect(responseJson.list).to.be.an('array');",
							"    pm.expect(responseJson.list.length).to.be.above(0);",
							"});",
							"",
							"pm.test(\"City information contains Tunis\", function () {",
							"    pm.expect(responseJson).to.have.property('city');",
							"    pm.expect(responseJson.city.name).to.include('Tunis');",
							"    pm.expect(responseJson.city).to.have.property('country');",
							"    pm.expect(responseJson.city.country).to.equal('TN');",
							"});",
							"",
							"pm.test(\"Each forecast item has required data\", function () {",
							"    responseJson.list.forEach(function(item) {",
							"        pm.expect(item).to.have.property('main');",
							"        pm.expect(item).to.have.property('weather');",
							"        pm.expect(item).to.have.property('dt_txt');",
							"        pm.expect(item.main).to.have.property('temp');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/forecast?q=Tunis,TN&appid={{api_key}}&units=metric",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"forecast"
					],
					"query": [
						{
							"key": "q",
							"value": "Tunis,TN"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						},
						{
							"key": "units",
							"value": "metric"
						}
					]
				}
			}
		},
		{
			"name": "Error Test - Invalid API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401 - Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message is present\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('message');",
							"    pm.expect(responseJson.message).to.include('Invalid API key');",
							"});",
							"",
							"pm.test(\"Response contains error code\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('cod');",
							"    pm.expect(responseJson.cod).to.equal(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/weather?q=Tunis,TN&appid=invalid_key_test&units=metric",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "Tunis,TN"
						},
						{
							"key": "appid",
							"value": "invalid_key_test"
						},
						{
							"key": "units",
							"value": "metric"
						}
					]
				}
			}
		},
		{
			"name": "Error Test - City Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 - Not Found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error message indicates city not found\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('message');",
							"    pm.expect(responseJson.message).to.include('city not found');",
							"});",
							"",
							"pm.test(\"Response contains proper error code\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('cod');",
							"    pm.expect(responseJson.cod).to.equal('404');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/weather?q=VilleInexistante123,TN&appid={{api_key}}&units=metric",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "VilleInexistante123,TN"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						},
						{
							"key": "units",
							"value": "metric"
						}
					]
				}
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://api.openweathermap.org/data/2.5",
			"type": "string"
		},
		{
			"key": "api_key",
			"value": "YOUR_API_KEY_HERE",
			"type": "string"
		}
	]
}